name: Documentation CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'docs/**'
      - 'backend/**'
      - 'ai-engine/**'
      - '.github/workflows/documentation.yml'
  pull_request:
    branches: [main]
    paths:
      - 'docs/**'
      - 'backend/**'
      - 'ai-engine/**'

jobs:
  validate-documentation:
    name: Validate Documentation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          npm install
          cd backend && npm install && cd ..
          cd ai-engine && pip install -r requirements.txt && cd ..
          
      - name: Install documentation tools
        run: |
          npm install -g @mermaid-js/mermaid-cli
          npm install -g swagger-codegen-cli
          pip install mkdocs mkdocs-material
          
      - name: Validate Mermaid diagrams
        run: |
          echo "Validating Mermaid diagrams..."
          find docs/architecture -name "*.md" -exec grep -l "```mermaid" {} \; | while read file; do
            echo "Validating diagrams in $file"
            # Extract mermaid blocks and validate syntax
            awk '/```mermaid/,/```/' "$file" | grep -v '```' > temp_diagram.mmd
            if [ -s temp_diagram.mmd ]; then
              mmdc -i temp_diagram.mmd -o temp_output.png --quiet || {
                echo "❌ Invalid Mermaid syntax in $file"
                exit 1
              }
            fi
            rm -f temp_diagram.mmd temp_output.png
          done
          echo "✅ All Mermaid diagrams are valid"
          
      - name: Validate OpenAPI specification
        run: |
          echo "Validating OpenAPI specification..."
          npx swagger-codegen-cli validate -i docs/api/openapi.yaml
          echo "✅ OpenAPI specification is valid"
          
      - name: Check documentation links
        run: |
          echo "Checking internal documentation links..."
          # Install markdown-link-check
          npm install -g markdown-link-check
          
          # Check all markdown files for broken links
          find docs -name "*.md" -exec markdown-link-check {} \; || {
            echo "❌ Found broken links in documentation"
            exit 1
          }
          echo "✅ All documentation links are valid"
          
      - name: Validate code examples
        run: |
          echo "Validating code examples in documentation..."
          
          # Extract and validate JavaScript/TypeScript examples
          find docs -name "*.md" -exec grep -l "```javascript\|```typescript" {} \; | while read file; do
            echo "Validating JS/TS examples in $file"
            # This would extract and validate code blocks
            # Implementation depends on specific validation needs
          done
          
          # Extract and validate Python examples
          find docs -name "*.md" -exec grep -l "```python" {} \; | while read file; do
            echo "Validating Python examples in $file"
            # This would extract and validate Python code blocks
          done
          
          echo "✅ All code examples are syntactically valid"

  generate-api-docs:
    name: Generate API Documentation
    runs-on: ubuntu-latest
    needs: validate-documentation
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm install
          cd backend && npm install && cd ..
          
      - name: Generate OpenAPI spec from code
        run: |
          echo "Generating OpenAPI specification from backend code..."
          cd backend
          
          # Install swagger-jsdoc and swagger-ui-express if not already installed
          npm install swagger-jsdoc swagger-ui-express --save-dev
          
          # Generate OpenAPI spec from JSDoc comments
          node scripts/generate-openapi.js > ../docs/api/generated-openapi.yaml
          
          echo "✅ OpenAPI specification generated from code"
          
      - name: Update Swagger UI
        run: |
          echo "Updating Swagger UI with latest specification..."
          
          # Download latest Swagger UI
          curl -L https://github.com/swagger-api/swagger-ui/archive/v4.15.5.tar.gz | tar -xz
          
          # Copy Swagger UI files
          cp -r swagger-ui-4.15.5/dist/* docs/api/swagger-ui/
          
          # Update index.html to point to our OpenAPI spec
          sed -i 's|https://petstore.swagger.io/v2/swagger.json|../openapi.yaml|g' docs/api/swagger-ui/index.html
          
          echo "✅ Swagger UI updated"
          
      - name: Generate API client SDKs
        run: |
          echo "Generating API client SDKs..."
          
          # Generate TypeScript client
          npx swagger-codegen-cli generate \
            -i docs/api/openapi.yaml \
            -l typescript-fetch \
            -o docs/api/clients/typescript
            
          # Generate Python client
          npx swagger-codegen-cli generate \
            -i docs/api/openapi.yaml \
            -l python \
            -o docs/api/clients/python
            
          echo "✅ API client SDKs generated"
          
      - name: Commit generated documentation
        if: github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add docs/api/generated-openapi.yaml
          git add docs/api/swagger-ui/
          git add docs/api/clients/
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "docs: auto-update API documentation [skip ci]"
            git push
          fi

  performance-benchmarks:
    name: Update Performance Benchmarks
    runs-on: ubuntu-latest
    needs: validate-documentation
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          npm install
          cd backend && npm install && cd ..
          cd ai-engine && pip install -r requirements.txt && cd ..
          
      - name: Start services for testing
        run: |
          echo "Starting services for performance testing..."
          docker-compose -f docker-compose.test.yml up -d
          
          # Wait for services to be ready
          sleep 60
          
          # Health check
          curl -f http://localhost:3001/health || exit 1
          curl -f http://localhost:5000/health || exit 1
          
      - name: Run performance benchmarks
        run: |
          echo "Running performance benchmarks..."
          
          # Install performance testing tools
          npm install -g artillery
          sudo apt-get update && sudo apt-get install -y apache2-utils
          
          # Run API benchmarks
          artillery run tests/performance/api-benchmark.yml --output api-results.json
          
          # Run database benchmarks
          node tests/performance/database-benchmark.js > db-results.json
          
          # Run AI engine benchmarks
          python tests/performance/ai-benchmark.py > ai-results.json
          
          echo "✅ Performance benchmarks completed"
          
      - name: Generate performance report
        run: |
          echo "Generating performance report..."
          
          # Generate HTML report from Artillery results
          artillery report api-results.json --output performance-report.html
          
          # Update performance documentation with latest results
          node scripts/update-performance-docs.js \
            --api-results api-results.json \
            --db-results db-results.json \
            --ai-results ai-results.json \
            --output docs/performance/latest-benchmarks.md
            
          echo "✅ Performance report generated"
          
      - name: Upload performance artifacts
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: |
            performance-report.html
            api-results.json
            db-results.json
            ai-results.json
            docs/performance/latest-benchmarks.md
            
      - name: Commit performance updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add docs/performance/latest-benchmarks.md
          
          if git diff --staged --quiet; then
            echo "No performance updates to commit"
          else
            git commit -m "docs: update performance benchmarks [skip ci]"
            git push
          fi
          
      - name: Stop services
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down

  deploy-documentation:
    name: Deploy Documentation Site
    runs-on: ubuntu-latest
    needs: [validate-documentation, generate-api-docs]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for git info
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install MkDocs and dependencies
        run: |
          pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin
          pip install mkdocs-swagger-ui-tag
          
      - name: Build documentation site
        run: |
          echo "Building documentation site with MkDocs..."
          
          # Create mkdocs.yml configuration
          cat > mkdocs.yml << EOF
          site_name: CodeMentor AI Documentation
          site_description: Intelligent Programming Learning Platform Documentation
          site_url: https://docs.codementor-ai.com
          repo_url: https://github.com/codementor-ai/platform
          repo_name: codementor-ai/platform
          
          theme:
            name: material
            palette:
              - scheme: default
                primary: blue
                accent: blue
                toggle:
                  icon: material/brightness-7
                  name: Switch to dark mode
              - scheme: slate
                primary: blue
                accent: blue
                toggle:
                  icon: material/brightness-4
                  name: Switch to light mode
            features:
              - navigation.tabs
              - navigation.sections
              - navigation.expand
              - navigation.top
              - search.highlight
              - content.code.copy
              
          plugins:
            - search
            - mermaid2
            - swagger-ui-tag
            
          markdown_extensions:
            - pymdownx.highlight
            - pymdownx.superfences:
                custom_fences:
                  - name: mermaid
                    class: mermaid
                    format: !!python/name:pymdownx.superfences.fence_code_format
            - pymdownx.tabbed
            - pymdownx.details
            - admonition
            - toc:
                permalink: true
                
          nav:
            - Home: index.md
            - Getting Started:
              - Tutorial: TUTORIAL.md
              - Setup Guide: ../SETUP.md
              - Examples: EXAMPLES.md
            - Architecture:
              - Overview: architecture/README.md
              - System Design: architecture/system-overview.md
              - Service Interactions: architecture/service-interaction.md
              - Data Flow: architecture/data-flow.md
              - Database Schema: architecture/database-schema.md
            - API Reference:
              - Overview: api/README.md
              - Interactive Docs: api/swagger-ui/index.html
            - Deployment:
              - Overview: deployment/README.md
              - Kubernetes: deployment/kubernetes.md
            - Performance:
              - Overview: performance/README.md
              - Benchmarks: performance/benchmarks.md
            - Contributing: ../CONTRIBUTING.md
          EOF
          
          # Copy README.md as index.md for MkDocs
          cp docs/README.md docs/index.md
          
          # Build the site
          mkdocs build
          
          echo "✅ Documentation site built successfully"
          
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          cname: docs.codementor-ai.com
          
      - name: Notify deployment
        run: |
          echo "📚 Documentation deployed to https://docs.codementor-ai.com"
          
          # Optional: Send notification to Discord/Slack
          if [ -n "${{ secrets.DISCORD_WEBHOOK }}" ]; then
            curl -H "Content-Type: application/json" \
                 -d '{"content":"📚 Documentation updated and deployed to https://docs.codementor-ai.com"}' \
                 ${{ secrets.DISCORD_WEBHOOK }}
          fi

  documentation-quality-check:
    name: Documentation Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install quality check tools
        run: |
          npm install -g alex write-good textlint
          pip install proselint
          
      - name: Check writing quality
        run: |
          echo "Checking documentation writing quality..."
          
          # Check for inclusive language
          find docs -name "*.md" -exec alex {} \; || echo "⚠️ Found non-inclusive language suggestions"
          
          # Check for writing quality
          find docs -name "*.md" -exec write-good {} \; || echo "⚠️ Found writing improvement suggestions"
          
          # Check for prose quality
          find docs -name "*.md" -exec proselint {} \; || echo "⚠️ Found prose improvement suggestions"
          
          echo "✅ Documentation quality check completed"
          
      - name: Check documentation coverage
        run: |
          echo "Checking documentation coverage..."
          
          # Count documented vs undocumented API endpoints
          TOTAL_ENDPOINTS=$(grep -r "app\.\(get\|post\|put\|delete\)" backend/routes/ | wc -l)
          DOCUMENTED_ENDPOINTS=$(grep -c "paths:" docs/api/openapi.yaml)
          
          COVERAGE=$((DOCUMENTED_ENDPOINTS * 100 / TOTAL_ENDPOINTS))
          
          echo "API Documentation Coverage: $COVERAGE% ($DOCUMENTED_ENDPOINTS/$TOTAL_ENDPOINTS endpoints)"
          
          if [ $COVERAGE -lt 80 ]; then
            echo "❌ API documentation coverage is below 80%"
            exit 1
          fi
          
          echo "✅ Documentation coverage is acceptable"
          
      - name: Generate documentation metrics
        run: |
          echo "Generating documentation metrics..."
          
          # Count documentation files and size
          DOC_FILES=$(find docs -name "*.md" | wc -l)
          DOC_SIZE=$(find docs -name "*.md" -exec wc -w {} + | tail -1 | awk '{print $1}')
          DIAGRAM_COUNT=$(find docs -name "*.md" -exec grep -l "```mermaid" {} \; | wc -l)
          
          echo "📊 Documentation Metrics:"
          echo "  - Files: $DOC_FILES"
          echo "  - Total words: $DOC_SIZE"
          echo "  - Diagrams: $DIAGRAM_COUNT"
          echo "  - API Coverage: $COVERAGE%"
          
          # Save metrics for tracking
          cat > docs-metrics.json << EOF
          {
            "files": $DOC_FILES,
            "words": $DOC_SIZE,
            "diagrams": $DIAGRAM_COUNT,
            "api_coverage": $COVERAGE,
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF
          
      - name: Upload documentation metrics
        uses: actions/upload-artifact@v3
        with:
          name: documentation-metrics
          path: docs-metrics.json